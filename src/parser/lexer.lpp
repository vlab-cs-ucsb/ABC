%{
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>
#include <iostream>

#include "Scanner.h"

%}

%option c++
%option yyclass="Scanner"
%option outfile="lexer.cpp"
%option noyywrap
%option stack


%x START_STRING
%x START_REGEX
%x START_QUOTEDSYMBOL

BOOL           true|false
BINARY         #b[0-1]+
HEXADECIMAL    #x[0-9a-fA-F]+
NUMERAL        0|[1-9]+[0-9]*
DECIMAL        NUMERAL\.0*NUMERAL
SYMBOL         [a-zA-Z0-9._+\-*=%?!$_~&^<>@][a-zA-Z0-9._+\-*=%/?!$_~&^<>@]*
KEYWORD        :[a-zA-Z0-9._+\-*=%?!$_~&^<>@]+

%{
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  loc.columns (yyleng);
%}

%%

%{
  // Code run each time yylex is called.
  loc.step ();
%}

";"[^\n]*\n         { loc.lines (yyleng); loc.step ();            }
";"[^\n]*         { loc.lines (yyleng); loc.step ();            }
\n                  { loc.lines (yyleng); loc.step ();            }
\r                  { loc.lines (yyleng); loc.step ();            }
[ \t]               { loc.step ();                                }

"("                 { return Parser::make_PAREN_O         (loc);  }
")"                 { return Parser::make_PAREN_C         (loc);  }

"!"                 { return Parser::make_BANG            (loc);  }
"_"                 { return Parser::make_UNDERSCORE      (loc);  }
"as"                { return Parser::make_AS              (loc);  }
"exists"            { return Parser::make_EXISTS          (loc);  }
"forall"            { return Parser::make_FORALL          (loc);  }
"let"               { return Parser::make_LET             (loc);  }
"par"               { return Parser::make_PAR             (loc);  }
"implies"           { return Parser::make_IMPLIES         (loc);  }
"=>"                { return Parser::make_IMPLIES         (loc);  }


"and"               { return Parser::make_AND             (loc);  }
"or"                { return Parser::make_OR              (loc);  }
"not"               { return Parser::make_NOT             (loc);  }
"-"                 { return Parser::make_MINUS           (loc);  }
"+"                 { return Parser::make_PLUS            (loc);  }
"*"                 { return Parser::make_STAR            (loc);  }
"div"               { return Parser::make_DIV             (loc);  }
"="                 { return Parser::make_EQ              (loc);  }
"=="                 { return Parser::make_EQ              (loc);  }
"!="                { return Parser::make_NOTEQ           (loc);  }
">"                 { return Parser::make_GT              (loc);  }
">="                { return Parser::make_GE              (loc);  }
"<"                 { return Parser::make_LT              (loc);  }
"<="                { return Parser::make_LE              (loc);  }
"concat"            { return Parser::make_CONCAT          (loc);  }
"Concat"            { return Parser::make_CONCAT          (loc);  }
"str.++"            { return Parser::make_CONCAT          (loc);  }
"in"                { return Parser::make_IN              (loc);  }
"In"                { return Parser::make_IN              (loc);  }
"RegexIn"           { return Parser::make_IN              (loc);  }
"notIn"             { return Parser::make_NOTIN           (loc);  }
"len"               { return Parser::make_LEN             (loc);  }
"Length"            { return Parser::make_LEN             (loc);  }
"str.len"           { return Parser::make_LEN             (loc);  }
"contains"          { return Parser::make_CONTAINS        (loc);  }
"Contains"          { return Parser::make_CONTAINS        (loc);  }
"notContains"       { return Parser::make_NOTCONTAINS     (loc);  }
"str.contains"      { return Parser::make_CONTAINS        (loc);  }
"begins"            { return Parser::make_BEGINS          (loc);  }
"BeginsWith"        { return Parser::make_BEGINS          (loc);  }
"StartsWith"        { return Parser::make_BEGINS          (loc);  }
"startsWith"        { return Parser::make_BEGINS          (loc);  }
"notBegins"         { return Parser::make_NOTBEGINS       (loc);  }
"str.prefixof"      { return Parser::make_PREFIXOF        (loc);  }
"ends"              { return Parser::make_ENDS            (loc);  }
"EndsWith"          { return Parser::make_ENDS            (loc);  }
"endsWith"          { return Parser::make_ENDS            (loc);  }
"notEnds"           { return Parser::make_NOTENDS         (loc);  }
"str.suffixof"      { return Parser::make_SUFFIXOF        (loc);  }
"indexOf"           { return Parser::make_INDEXOF         (loc);  }
"Indexof"           { return Parser::make_INDEXOF         (loc);  }
"str.indexof"       { return Parser::make_INDEXOF         (loc);  }
"lastIndexOf"       { return Parser::make_LASTINDEXOF     (loc);  }
"LastIndexOf"       { return Parser::make_LASTINDEXOF     (loc);  }
"LastIndexof"       { return Parser::make_LASTINDEXOF     (loc);  }
"charAt"            { return Parser::make_CHARAT          (loc);  }
"str.at"            { return Parser::make_CHARAT          (loc);  }
"subString"         { return Parser::make_SUBSTRING       (loc);  }
"Substring"         { return Parser::make_SUBSTRINGLENGTH (loc);  }
"str.substr"        { return Parser::make_SUBSTRINGLENGTH (loc);  }
"subStringFirstOf"  { return Parser::make_SUBSTRINGFIRSTOF(loc);  }
"subStringLastOf"   { return Parser::make_SUBSTRINGLASTOF (loc);  }
"toUpper"           { return Parser::make_TOUPPER         (loc);  }
"toLower"           { return Parser::make_TOLOWER         (loc);  }
"trim"              { return Parser::make_TRIM            (loc);  }
"toString"          { return Parser::make_TOSTRING        (loc);  }
"int.to.str"        { return Parser::make_TOSTRING        (loc);  }
"str.from_int"      { return Parser::make_TOSTRING        (loc);  }
"toInt"             { return Parser::make_TOINT           (loc);  }
"str.to.int"        { return Parser::make_TOINT           (loc);  }
"str.to_int"        { return Parser::make_TOINT           (loc);  }
"replace"           { return Parser::make_REPLACE         (loc);  }
"Replace"           { return Parser::make_REPLACE         (loc);  }
"ReplaceAll"        { return Parser::make_REPLACE         (loc);  }
"str.replace"       { return Parser::make_REPLACE         (loc);  }
"count"             { return Parser::make_COUNT           (loc);  }
"ite"               { return Parser::make_ITE             (loc);  }
"RegexConcat"       { return Parser::make_RE_CONCAT       (loc);  }
"Union"             { return Parser::make_RE_UNION        (loc);  }
"RegexUnion"        { return Parser::make_RE_UNION        (loc);  }
"RegexStar"         { return Parser::make_RE_STAR         (loc);  }
"Star"              { return Parser::make_RE_STAR         (loc);  }

"str.to_code"       { return Parser::make_TO_CODE         (loc);  }
"str.from_code"     { return Parser::make_FROM_CODE         (loc);  }
"str.is_digit"      { return Parser::make_IS_DIGIT        (loc);  }
"str.in.re"         { return Parser::make_IN              (loc);  }
"str.to.re"         { return Parser::make_TO_REGEX        (loc);  }
"Str2Reg"           { return Parser::make_TO_REGEX        (loc);  }

"re.++"             { return Parser::make_RE_CONCAT       (loc);  }
"re.union"          { return Parser::make_RE_UNION        (loc);  }
"re.inter"          { return Parser::make_RE_INTER        (loc);  }
"re.*"              { return Parser::make_RE_STAR         (loc);  }
"re.+"              { return Parser::make_RE_PLUS         (loc);  }
"re.opt"            { return Parser::make_RE_OPT          (loc);  }
"re.range"          { return Parser::make_RE_RANGE        (loc);  }
"re.^"              { return Parser::make_RE_REPEAT       (loc);  }
"re.loop"           { return Parser::make_RE_LOOP         (loc);  }
"re.comp"           { return Parser::make_RE_COMP         (loc);  }
"re.complement"     { return Parser::make_RE_COMP         (loc);  }
"re.diff"           { return Parser::make_RE_DIFF         (loc);  }


"re.all"            { return Parser::make_RE_ALL          (loc);  }
"re.allchar"        { return Parser::make_RE_ALLCHAR      (loc);  }
"re.nostr"          { return Parser::make_RE_NOSTR        (loc);  }
"re.or"             { return Parser::make_OR              (loc);  }


"Bool"              { return Parser::make_TBOOL           (loc);  }
"bool"              { return Parser::make_TBOOL           (loc);  }

"Int"               { return Parser::make_TINT            (loc);  }
"String"            { return Parser::make_TSTRING         (loc);  }
"RegExp"            { return Parser::make_TREGEXP         (loc);  }
                 
"assert"            { return Parser::make_ASSERT          (loc);  }
"check-sat"         { return Parser::make_CHECK_SAT       (loc);  }
"check-sat-and-count" { return Parser::make_CHECK_SAT_AND_COUNT  (loc);  }
"declare-fun"       { return Parser::make_DECLARE_FUN     (loc);  }
"declare-variable"  { return Parser::make_DECLARE_FUN     (loc);  }
"declare-const"     { return Parser::make_DECLARE_FUN     (loc);  }
"declare-sort"      { return Parser::make_DECLARE_SORT    (loc);  }
"define-fun"        { return Parser::make_DEFINE_FUN      (loc);  }
"define-sort"       { return Parser::make_DEFINE_SORT     (loc);  }
"exit"              { return Parser::make_EXIT            (loc);  }
"get-assertions"    { return Parser::make_GET_ASSERTIONS  (loc);  }
"get-assignment"    { return Parser::make_GET_ASSIGNMENT  (loc);  }
"get-info"          { return Parser::make_GET_INFO        (loc);  }
"get-model"         { return Parser::make_GET_MODEL       (loc);  }
"get-option"        { return Parser::make_GET_OPTION      (loc);  }  
"get-proof"         { return Parser::make_GET_PROOF       (loc);  }
"get-unsat-core"    { return Parser::make_GET_UNSAT_CORE  (loc);  }
"get-value"         { return Parser::make_GET_VALUE       (loc);  }
"pop"               { return Parser::make_POP             (loc);  }
"push"              { return Parser::make_PUSH            (loc);  }
"set-logic"         { return Parser::make_SET_LOGIC       (loc);  }
"set-info"          { return Parser::make_SET_INFO        (loc);  }
"set-option"        { return Parser::make_SET_OPTION      (loc);  }

{BOOL}              { return Parser::make_BOOL            (yytext, loc);  }
{BINARY}            { return Parser::make_BINARY          (yytext, loc);  }
{DECIMAL}           { return Parser::make_DECIMAL         (yytext, loc);  }
{HEXADECIMAL}       { return Parser::make_HEXADECIMAL     (yytext, loc);  }
{KEYWORD}           { return Parser::make_KEYWORD         (yytext, loc);  }
{NUMERAL}           { return Parser::make_NUMERAL         (yytext, loc);  }
{SYMBOL}            { return Parser::make_SYMBOL          (yytext, loc);  }

\"                  { quoted_value.str(std::string()); yy_push_state(START_STRING); }

<START_STRING>{
  \\[xX][0-9A-Fa-f][0-9A-Fa-f] { std::string byte = std::string(yytext).substr(2,4);quoted_value << (char)(int)strtol(byte.c_str(),NULL,16); }
  \\[xX][0-9A-Fa-f] { std::string byte = std::string(yytext).substr(2,3);quoted_value << (char)(int)strtol(byte.c_str(),NULL,16); }
  \"\"              { quoted_value << '"';      }
  \\v              { quoted_value << '\v';      }
  \\f              { quoted_value << '\f';      }
  \\n              { quoted_value << '\n';      }
  \\\\              { quoted_value << '\\';     }
  \\t              { quoted_value << '\t';      }
  \\r              { quoted_value << '\r';      }
  [^\"\n]           { quoted_value << yytext;   }
  \n                { quoted_value << '\n';     }
  \"                { yy_pop_state(); return Parser::make_STRING (quoted_value.str(), loc); }
}

\/                  { quoted_value.str(std::string()); yy_push_state(START_REGEX); }

<START_REGEX>{
  \\\/              { quoted_value << '/';      }
  \\\\              { quoted_value << '\\';     }
  [^\/\n]           { quoted_value << yytext;   }
  \n                { quoted_value << '\n';     }
  \/                { yy_pop_state(); return Parser::make_REGEX (quoted_value.str(), loc); }
}

\|                  { quoted_value.str(std::string()); yy_push_state(START_QUOTEDSYMBOL); }

<START_QUOTEDSYMBOL>{
  [^|\\]              { quoted_value << yytext; }
  \|                { yy_pop_state(); return Parser::make_SYMBOL (quoted_value.str(), loc); }
}

.                   { LexerError("invalid character");            }

<<EOF>>             { return Parser::make_END             (loc);  }

%%
